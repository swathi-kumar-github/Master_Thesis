%!PS-Adobe-3.0 EPSF-3.0
%%Creator: dvips(k) 5.98 Copyright 2009 Radical Eye Software
%%Title: C:/Projects/Dokumente/Institut/ISS-Logo/Stand_2011-12-21/isslogo.dvi
%%CreationDate: Wed Dec 21 12:19:47 2011
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 168 485 473 715
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: "C:\Program Files\MiKTeX 2.8\miktex\bin\dvips.exe"
%+ C:/Projects/Dokumente/Institut/ISS-Logo/Stand_2011-12-21/isslogo.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2011.12.21:1219
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 266 2010-01-22 14:45:23Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.06, 2009/01/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep div cvi def
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  XA Shift sub YA Shift sub moveto 
  gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
  Symbol show grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  showpoints 
    { ] aload /Points ED } 
    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    0 exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop 0 Lineto
      n { 2 copy moveto pop 0 Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop 0
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    startAngle rotate Symbol show 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} 
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if
    Symbol show 
    grestore
  }
  pathforall 
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED /c ED /n ED 
  cvi dup 1 lt { pop 1 } if 
  /s ED 
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if
  /dx ED dy div round dy mul 
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 90 2009-01-30 10:58:51Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.01, 2008/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.12
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower IsEndingFactor { pop exit } if} loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 39139632 55387786 1000 600 600
(C:/Projects/Dokumente/Institut/ISS-Logo/Stand_2011-12-21/isslogo.dvi)
@start end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
805 2515 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.0 SLW 0.5  setgray   0.0 SLW 0.5  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 0.27783 21.80981 0.41675 22.08765 0.55566 22.08765 0.8335 22.36548
0.97241 21.94873 1.11133 22.08765 1.25024 22.22656 1.38916 21.94873
1.66699 22.22656 1.80591 22.78223 1.94482 22.22656 2.08374 22.22656
2.22266 22.5044 2.36157 22.92114 2.6394 22.92114 2.77832 22.92114 2.91724
23.06006 3.05615 23.06006 3.19507 23.19897 3.4729 23.19897 3.61182
22.36548 3.75073 22.92114 3.88965 23.19897 4.02856 22.64331 4.3064
23.19897 4.44531 23.06006 4.58423 23.33789 4.72314 23.4768 4.86206
23.33789 5.1399 23.89355 5.27881 23.19897 5.41772 23.19897 5.55664
23.06006 5.69556 23.33789 5.83447 23.61572 6.1123 23.33789 6.25122
23.4768 6.39014 23.61572 6.52905 23.33789 6.66797 23.4768 6.9458 23.61572
7.08472 23.4768 7.22363 23.33789 7.36255 23.89355 7.50146 23.61572
7.7793 23.4768 7.91821 23.33789 8.05713 23.75464 8.19604 23.75464 8.33496
23.89355 8.47388 24.03247 8.75171 23.75464 8.89063 23.89355 9.02954
23.89355 9.16846 24.3103 9.30737 23.75464 9.5852 24.58813 9.72412 23.61572
9.86304 23.89355 10.00195 23.89355 10.14087 24.3103 10.4187 24.17139
10.55762 25.00488 10.69653 25.00488 10.83545 24.58813 10.97437 24.58813
11.2522 25.28271 11.39111 25.00488 11.53003 24.44922 11.66895 24.86597
11.80786 24.44922 11.94678 24.86597 12.22461 25.42163 12.36353 25.1438
12.50244 25.56055 12.64136 24.86597 12.78027 25.1438 13.0581 25.28271
13.19702 25.28271 13.33594 25.9773 13.47485 25.69946 13.61377 25.69946
13.8916 25.83838 14.03052 25.83838 14.16943 26.11621 14.30835 25.83838
14.44727 25.83838 14.7251 25.83838 14.86401 26.11621 15.00293 23.61572
15.14185 25.9773 15.28076 26.53296 15.41968 27.22754 15.69751 26.67188
15.83643 26.11621 15.97534 25.56055 16.11426 17.50342 16.25317 25.9773
16.531 28.89453 16.66992 31.53394 16.80884 27.36646 16.94775 24.03247
17.08667 24.3103 17.3645 26.11621 17.50342 21.94873 17.64233 30.70044
17.78125 31.11719 17.92017 32.78418 18.05908 26.53296 18.33691 23.61572
18.47583 20.42065 18.61475 21.80981 18.75366 24.72705 18.89258 31.67285
19.17041 40.98022 19.30933 34.45117 19.44824 25.1438 19.58716 23.33789
19.72607 21.94873 20.0039 26.81079 20.14282 26.81079 20.28174 28.06104
20.42065 38.2019 20.55957 42.64722 20.8374 30.83936 20.97632 24.03247
21.11523 21.53198 21.25415 24.44922 21.39307 25.56055 21.53198 24.03247
21.80981 32.64526 21.94873 44.45313 22.08765 40.42456 22.22656 28.33887
22.36548 21.25415 22.64331 20.97632 22.78223 24.03247 22.92114 24.86597
23.06006 27.36646 23.19897 34.17334 23.4768 46.12012 23.61572 38.2019
23.75464 27.7832 23.89355 19.17041 24.03247 21.6709 24.3103 23.89355
24.44922 25.69946 24.58813 29.58911 24.72705 36.95166 24.86597 46.12012
25.00488 39.45215 25.28271 28.6167 25.42163 20.14282 25.56055 21.6709
25.69946 23.61572 25.83838 25.69946 26.11621 30.28369 26.25513 36.25708
26.39404 48.34277 26.53296 40.00781 26.67188 29.31128 26.9497 20.55957
27.08862 20.28174 27.22754 23.06006 27.36646 25.83838 27.50537 30.14478
27.64429 33.06201 27.92212 44.59204 28.06104 45.84229 28.19995 30.97827
28.33887 23.06006 28.47778 20.42065 28.75562 21.80981 28.89453 27.08862
29.03345 30.00586 29.17236 33.61768 29.31128 44.1753 29.58911 46.25903
29.72803 34.45117 29.86694 24.44922 30.00586 19.30933 30.14478 22.08765
30.4226 25.1438 30.56152 30.14478 30.70044 33.33984 30.83936 37.92407
30.97827 49.73193 31.11719 40.00781 31.39502 29.86694 31.53394 22.22656
31.67285 18.198 31.81177 25.83838 31.95068 28.6167 32.22852 31.81177
32.36743 37.92407 32.50635 45.42554 32.64526 46.95361 32.78418 35.14575
33.06201 23.19897 33.20093 22.5044 33.33984 21.53198 33.47876 27.36646
33.61768 32.50635 33.89551 34.03442 34.03442 45.00879 34.17334 50.14868
34.31226 35.84033 34.45117 28.06104 34.59009 18.89258 34.86792 20.55957
35.00684 26.25513 35.14575 28.6167 35.28467 35.97925 35.42358 42.09155
35.70142 50.00977 35.84033 42.64722 35.97925 27.64429 36.11816 23.4768
36.25708 20.42065 36.53491 22.92114 36.67383 31.67285 36.81274 32.78418
36.95166 36.53491 37.09058 50.84326 37.22949 41.95264 37.50732 32.9231
37.64624 22.36548 37.78516 20.69849 37.92407 26.11621 38.06299 27.50537
38.34082 31.81177 38.47974 36.53491 38.61865 42.5083 38.75757 49.59302
38.89648 35.70142 39.17432 24.58813 39.31323 22.36548 39.45215 21.11523
39.59106 27.64429 39.72998 32.78418 40.00781 32.9231 40.14673 45.28662
40.28564 51.26001 40.42456 36.53491 40.56348 32.22852 40.7024 20.69849
40.98022 23.33789 41.11914 28.6167 41.25806 29.4502 41.39697 34.31226
41.53589 44.86987 41.81372 45.9812 41.95264 42.5083 42.09155 31.11719
42.23047 22.92114 42.36938 24.44922 42.64722 26.39404 42.78613 30.97827
42.92505 33.47876 43.06396 40.56348 43.20288 51.53784 43.48071 45.28662
43.61963 33.33984 43.75854 24.44922 43.89746 24.03247 44.03638 27.92212
44.1753 31.39502 44.45313 34.03442 44.59204 37.09058 44.73096 51.67676
44.86987 45.00879 45.00879 31.81177 45.28662 24.44922 45.42554 21.53198
45.56445 25.69946 45.70337 31.53394 45.84229 34.45117 46.12012 39.0354
46.25903 50.56543 46.39795 46.53687 46.53687 32.22852 46.67578 24.86597
46.8147 23.19897 47.09253 26.53296 47.23145 32.78418 47.37036 35.00684
47.50928 43.3418 47.6482 48.34277 47.92603 45.56445 48.06494 34.86792
48.20386 23.89355 48.34277 23.61572 48.48169 24.86597 48.75952 31.53394
48.89844 39.0354 49.03735 45.00879 49.17627 55.98315 49.31519 39.8689
49.59302 32.50635 49.73193 23.33789 49.87085 22.92114 50.00977 30.14478
50.14868 35.28467 50.2876 38.34082 50.56543 47.23145 50.70435 51.81567
50.84326 42.23047 50.98218 28.6167 51.1211 25.00488 51.39893 23.89355
51.53784 28.06104 51.67676 37.36841 51.81567 40.98022 51.95459 53.7605
52.23242 49.31519 52.37134 37.36841 52.51025 29.4502 52.64917 25.00488
52.78809 26.11621 53.06592 31.2561 53.20483 35.84033 53.34375 46.25903
53.48267 54.03833 53.62158 48.48169 53.7605 35.97925 54.03833 25.28271
54.17725 26.39404 54.31616 26.81079 54.45508 32.36743 54.594 38.2019
54.87183 51.39893 55.01074 54.87183 55.14966 41.39697 55.28857 30.70044
55.42749 27.08862 55.70532 25.00488 55.84424 30.56152 55.98315 37.09058
56.12207 40.84131 56.26099 53.62158 56.3999 49.59302 56.67773 38.06299
56.81665 30.00586 56.95557 24.03247 57.09448 27.36646 57.2334 30.4226
57.51123 36.95166 57.65015 46.53687 57.78906 52.23242 57.92798 46.53687
58.0669 37.78516 58.34473 25.56055 58.48364 27.50537 58.62256 26.25513
58.76147 33.33984 58.90039 41.39697 59.17822 47.92603 59.31714 52.78809
59.45605 42.64722 59.59497 29.4502 59.73389 28.6167 59.8728 25.28271
60.15063 29.31128 60.28955 37.64624 60.42847 39.59106 60.56738 54.45508
60.7063 48.89844 60.98413 38.2019 61.12305 31.95068 61.26196 26.39404
61.40088 30.83936 61.5398 32.9231 61.81763 35.84033 61.95654 46.67578
62.09546 50.42651 62.23438 45.70337 62.37329 38.61865 62.65112 28.06104
62.79004 31.95068 62.92896 32.9231 63.06787 34.31226 63.20679 40.00781
63.3457 46.39795 63.62354 53.62158 63.76245 43.61963 63.90137 34.59009
64.04028 32.22852 64.1792 31.39502 64.45703 36.81274 64.59595 38.89648
64.73486 40.42456 64.87378 51.39893 65.0127 49.73193 65.29053 45.1477
65.42944 33.75659 65.56836 32.22852 65.70728 34.17334 65.84619 35.42358
65.9851 39.8689 66.26294 40.00781 66.40186 50.00977 66.54077 51.39893
66.67969 45.00879 66.8186 37.92407 67.09644 33.33984 67.23535 36.53491
67.37427 36.95166 67.51318 36.67383 67.6521 40.98022 67.92993 49.73193
68.06885 50.14868 68.20776 44.31421 68.34668 37.36841 68.4856 35.00684
68.76343 37.64624 68.90234 37.50732 69.04126 40.28564 69.18018 40.98022
69.31909 46.53687 69.45801 48.75952 69.73584 44.03638 69.87476 40.28564
70.01367 36.81274 70.15259 35.84033 70.2915 41.53589 70.56934 40.98022
70.70825 41.25806 70.84717 45.9812 70.98608 47.09253 71.125 45.70337
71.40283 41.53589 71.54175 35.5625 71.68066 37.92407 71.81958 39.17432
71.9585 41.39697 72.23633 41.6748 72.37524 42.5083 72.51416 47.6482
72.65308 45.1477 72.79199 42.36938 72.93091 38.47974 73.20874 36.53491
73.34766 40.00781 73.48657 41.6748 73.62549 42.36938 73.7644 42.92505
74.04224 42.36938 74.18115 43.48071 74.32007 42.78613 74.45898 41.6748
74.5979 41.6748 74.87573 42.09155 75.01465 42.23047 75.15356 42.36938
75.29248 45.28662 75.4314 43.3418 75.57031 40.14673 75.84814 38.75757
75.98706 42.36938 76.12598 45.42554 76.2649 43.3418 76.40381 40.56348
76.68164 42.36938 76.82056 44.31421 76.95947 47.6482 77.09839 46.8147
77.2373 41.11914 77.51514 38.34082 77.65405 40.98022 77.79297 43.20288
77.93188 46.39795 78.0708 43.75854 78.34863 40.98022 78.48755 41.25806
78.62646 43.75854 78.76538 44.73096 78.9043 44.1753 79.04321 43.89746
79.32104 43.48071 79.45996 43.75854 79.59888 44.45313 79.7378 43.89746
79.87671 44.31421 80.15454 44.31421 80.29346 43.75854 80.43237 43.89746
80.57129 44.31421 80.7102 45.00879 80.98804 45.00879 81.12695 44.73096
81.26587 43.75854 81.40479 44.1753 81.5437 45.42554 81.82153 45.42554
81.96045 44.45313 82.09937 41.11914 82.23828 44.59204 82.3772 49.31519
82.51611 49.03735 82.79395 45.28662 82.93286 41.95264 83.07178 44.1753
83.2107 45.42554 83.34961 48.20386 83.62744 46.12012 83.76636 44.59204
83.90527 45.00879 84.04419 45.28662 84.1831 46.25903 84.46094 45.9812
84.59985 44.86987 84.73877 45.1477 84.87769 45.9812 85.0166 46.53687
85.15552 46.25903 85.43335 46.12012 85.57227 45.70337 85.71118 45.9812
85.8501 46.12012 85.98901 45.56445 86.26685 46.25903 86.40576 46.39795
86.54468 46.8147 86.6836 46.53687 86.82251 46.67578 87.10034 46.12012
87.23926 46.67578 87.37817 47.09253 87.51709 47.09253 87.656 46.8147
87.93384 47.09253 88.07275 46.53687 88.21167 46.53687 88.35059 47.50928
88.4895 47.37036 88.62842 46.53687 88.90625 46.95361 89.04517 46.95361
89.18408 47.37036 89.323 47.6482 89.46191 47.09253 89.73975 47.23145
89.87866 47.50928 90.01758 47.37036 90.1565 47.37036 90.29541 46.67578
90.57324 47.50928 90.71216 46.67578 90.85107 47.37036 90.98999 47.50928
91.1289 47.37036 91.40674 47.09253 91.54565 47.37036 91.68457 47.09253
91.82349 47.6482 91.9624 48.06494 92.10132 47.78711 92.37915 48.20386
92.51807 48.20386 92.65698 47.92603 92.7959 47.37036 92.93481 48.34277
93.21265 47.92603 93.35156 48.34277 93.49048 48.20386 93.6294 48.20386
93.76831 48.34277 94.04614 48.89844 94.18506 48.34277 94.32397 48.48169
94.46289 48.48169 94.6018 49.17627 94.74072 48.48169 95.01855 48.48169
95.15747 48.48169 95.29639 48.75952 95.4353 48.6206 95.57422 48.75952
95.85205 48.89844 95.99097 48.89844 96.12988 49.17627 96.2688 48.48169
96.40771 48.75952 96.68555 49.03735 96.82446 49.17627 96.96338 48.6206
97.1023 48.6206 97.24121 48.75952 97.51904 49.17627 97.65796 49.03735
97.79688 49.31519 97.93579 49.4541 98.0747 49.31519 98.21362 49.31519
98.49146 49.4541 98.63037 49.17627 98.76929 49.4541 98.9082 49.17627
99.04712 49.73193 99.32495 49.31519 99.46387 49.59302 99.60278 49.59302
99.7417 49.4541 99.88062 49.73193 100.15845 48.89844 100.29736 49.17627
100.43628 49.73193 100.5752 49.59302 100.71411 50.00977 100.99194 49.87085
101.13086 49.4541 101.26978 49.4541 101.40869 49.73193 101.5476 49.4541
101.68652 49.73193 101.96436 49.87085 102.10327 50.14868 102.24219
50.14868 102.3811 50.70435 102.52002 50.2876 102.79785 49.73193 102.93677
49.59302 103.07568 50.42651 103.2146 50.84326 103.35352 50.70435 103.63135
50.2876 103.77026 50.70435 103.90918 50.56543 104.0481 50.84326 104.18701
50.56543 104.32593 50.70435 104.60376 51.53784 104.74268 51.1211 104.88159
51.26001 105.02051 51.39893 105.15942 51.1211 105.43726 50.84326 105.57617
51.1211 105.71509 51.1211 105.854 51.26001 105.99292 51.39893 106.27075
51.53784 106.40967 51.39893 106.54858 51.95459 106.6875 51.67676 106.82642
51.53784 107.10425 51.53784 107.24316 51.1211 107.38208 51.1211 107.521
51.39893 107.65991 51.67676 107.79883 43.20288 108.07666 52.37134 108.21558
48.6206 108.35449 51.81567 108.49341 48.75952 108.63232 49.87085 108.91016
51.26001 109.04907 52.23242 109.18799 52.64917 109.3269 52.0935 109.46582
51.67676 109.74365 52.64917 109.88257 52.51025 110.02148 52.23242 110.1604
52.64917 110.29932 50.14868 110.57715 52.927 110.71606 52.64917 110.85498
53.62158 110.9939 53.06592 111.13281 49.17627 111.27173 52.64917 111.54956
52.51025 111.68848 52.78809 111.8274 56.67773 111.96631 50.00977 112.10522
52.37134 112.38306 53.62158 112.52197 52.927 112.66089 54.31616 112.7998
54.31616 112.93872 50.00977 113.21655 53.06592 113.35547 53.62158 113.49438
53.48267 113.6333 54.17725 113.77222 52.78809 113.91113 53.34375 114.18896
58.76147 114.32788 52.78809 114.4668 54.87183 114.60571 56.26099 114.74463
53.48267 115.02246 50.2876 115.16138 51.1211 115.3003 53.48267 115.43921
56.95557 115.57813 56.3999 115.85596 61.12305 115.99487 53.48267 116.13379
50.84326 116.2727 54.87183 116.41162 47.78711 116.68945 53.20483 116.82837
46.8147 116.96729 49.59302 117.1062 54.31616 117.24512 54.594 117.38403
57.2334 117.66187 61.26196 117.80078 54.17725 117.9397 59.0393 118.07861
55.84424 118.21753 52.37134 118.49536 55.28857 118.63428 48.6206 118.7732
53.89941 118.91211 54.03833 119.05103 55.84424 119.32886 55.84424 119.46777
62.23438 119.60669 55.14966 119.7456 50.00977 119.88452 57.51123 120.16235
55.84424 120.30127 52.37134 120.44019 52.23242 120.5791 48.48169 120.71802
54.87183 120.85693 55.84424 121.13477 55.5664 121.27368 61.95654 121.4126
58.34473 121.55151 41.25806 121.69043 55.5664 121.96826 53.34375 122.10718
50.2876 122.2461 55.42749 122.38501 46.8147 122.52393 54.87183 122.80176
51.95459 122.94067 59.31714 123.07959 59.0393 123.2185 71.9585 123.35742
51.81567 123.49634 59.73389 123.77417 65.70728 123.91309 53.20483 124.052
66.26294 124.19092 48.75952 124.32983 51.81567 124.60767 50.84326 124.74658
56.67773 124.8855 56.95557 125.02441 64.73486 125.16333 69.31909 125.44116
59.0393 125.58008 59.45605 125.719 55.98315 125.85791 56.12207 125.99683
54.73291 126.27466 52.78809 126.41357 45.56445 126.55249 52.64917 126.6914
50.00977 126.83032 66.40186 126.96924 57.37231 127.24707 74.87573 127.38599
61.26196 127.5249 63.3457 127.66382 62.65112 127.80273 56.3999 128.08057
57.09448 128.21948 50.70435 128.3584 40.84131 128.49731 51.26001 128.63623
50.84326 128.91406 63.90137 129.05298 58.48364 129.1919 68.34668 129.33081
57.09448 129.46973 54.87183 129.74756 61.26196 129.88647 56.95557 130.02539
57.92798 130.1643 54.03833 130.30322 45.00879 130.44214 51.67676 130.71997
51.67676 130.85889 61.12305 130.9978 62.79004 131.13672 73.20874 131.27563
57.92798 131.55347 57.78906 131.69238 64.73486 131.8313 57.51123 131.97021
59.59497 132.10913 58.0669 132.38696 51.95459 132.52588 52.23242 132.6648
52.78809 132.80371 56.12207 132.94263 66.95752 133.08154 73.62549 133.35938
71.54175 133.49829 54.31616 133.6372 66.12402 133.77612 59.0393 133.91504
58.48364 134.19287 62.37329 134.33179 52.64917 134.4707 48.20386 134.60962
49.87085 134.74854 50.14868 135.02637 58.62256 135.16528 69.04126 135.3042
76.54272 135.44312 58.62256 135.58203 59.8728 135.85986 63.76245 135.99878
58.76147 136.1377 60.28955 136.27661 60.28955 136.41553 53.48267 136.55444
53.06592 136.83228 51.26001 136.97119 54.17725 137.1101 61.12305 137.24902
73.34766 137.38794 72.79199 137.66577 59.8728 137.80469 60.98413 137.9436
63.62354 138.08252 59.45605 138.22144 60.42847 138.49927 59.73389 138.63818
54.17725 138.7771 50.84326 138.91602 53.20483 139.05493 57.37231 139.33276
64.59595 139.47168 72.23633 139.6106 70.43042 139.74951 60.98413 139.88843
61.12305 140.02734 64.73486 140.30518 60.15063 140.44409 60.84521 140.58301
57.92798 140.72192 53.06592 140.86084 53.06592 141.13867 56.95557 141.27759
60.84521 141.4165 65.9851 141.55542 69.04126 141.69434 72.79199 141.97217
65.29053 142.11108 63.90137 142.25 65.84619 142.38892 62.23438 142.52783
61.67871 142.66675 60.7063 142.94458 57.78906 143.0835 57.51123 143.22241
60.98413 143.36133 62.65112 143.50024 66.26294 143.77808 66.95752 143.91699
70.01367 144.05591 70.43042 144.19482 67.92993 144.33374 62.92896 144.61157
62.5122 144.75049 62.65112 144.8894 61.40088 145.02832 62.5122 145.16724
62.65112 145.44507 61.95654 145.58398 62.92896 145.7229 65.56836 145.86182
66.12402 146.00073 67.51318 146.13965 67.79102 146.41748 66.40186 146.5564
68.20776 146.69531 65.15161 146.83423 65.56836 146.97314 63.48462 147.25098
63.90137 147.3899 62.79004 147.52881 62.92896 147.66772 61.95654 147.80664
60.15063 148.08447 61.95654 148.22339 67.6521 148.3623 66.54077 148.50122
68.90234 148.64014 62.5122 148.91797 62.37329 149.05688 64.1792 149.1958
67.79102 149.33472 63.76245 149.47363 67.23535 149.61255 63.48462 149.89038
64.45703 150.0293 69.73584 150.16821 69.45801 150.30713 64.04028 150.44604
61.12305 150.72388 63.62354 150.8628 67.09644 151.00171 68.20776 151.14063
64.1792 151.27954 61.12305 151.55737 63.48462 151.69629 64.04028 151.8352
67.79102 151.97412 61.5398 152.11304 68.20776 152.39087 66.67969 152.52979
59.17822 152.6687 64.59595 152.80762 63.76245 152.94653 65.15161 153.08545
64.45703 153.36328 61.81763 153.5022 65.0127 153.64111 63.76245 153.78003
63.76245 153.91895 64.1792 154.19678 64.45703 154.3357 64.73486 154.47461
65.29053 154.61353 65.42944 154.75244 64.73486 155.03027 67.23535 155.16919
65.42944 155.3081 65.70728 155.44702 65.42944 155.58594 64.73486 155.72485
65.56836 156.00269 65.70728 156.1416 67.6521 156.28052 65.84619 156.41943
65.29053 156.55835 66.40186 156.83618 64.59595 156.9751 65.29053 157.11401
62.92896 157.25293 65.42944 157.39185 61.26196 157.66968 65.0127 157.8086
66.8186 157.94751 65.70728 158.08643 70.01367 158.22534 70.01367 158.50317
70.56934 158.64209 73.7644 158.781 65.9851 158.91992 65.70728 159.05884
65.56836 159.19775 63.20679 159.47559 65.42944 159.6145 62.23438 159.75342
65.70728 159.89233 62.5122 160.03125 65.70728 160.30908 62.37329 160.448
68.76343 160.58691 67.23535 160.72583 65.70728 160.86475 66.40186 161.14258
64.04028 161.2815 65.70728 161.42041 60.98413 161.55933 63.90137 161.69824
64.1792 161.97607 63.48462 162.11499 66.12402 162.2539 66.26294 162.39282
67.79102 162.53174 63.90137 162.67065 69.59692 162.94849 64.59595 163.0874
61.26196 163.22632 66.95752 163.36523 62.5122 163.50415 68.06885 163.78198
63.76245 163.9209 66.8186 164.05981 67.23535 164.19873 61.26196 164.33765
71.125 164.61548 67.6521 164.7544 67.23535 164.89331 67.37427 165.03223
67.23535 165.17114 68.34668 165.31006 67.37427 165.58789 66.95752 165.7268
62.79004 165.86572 67.51318 166.00464 67.6521 166.14355 67.23535 166.42139
65.56836 166.5603 71.81958 166.69922 67.23535 166.83813 68.76343 166.97705
64.59595 167.25488 67.79102 167.3938 65.42944 167.53271 64.45703 167.67163
65.70728 167.81055 63.3457 168.08838 68.20776 168.2273 68.34668 168.36621
68.34668 168.50513 69.31909 168.64404 69.59692 168.78296 68.62451 169.06079
69.04126 169.1997 66.12402 169.33862 68.4856 169.47754 68.62451 169.61646
68.34668 169.89429 71.26392 170.0332 68.20776 170.17212 68.90234 170.31104
68.90234 170.44995 70.15259 170.72778 70.2915 170.8667 70.43042 171.00562
70.15259 171.14453 69.18018 171.28345 69.31909 171.56128 69.31909 171.7002
69.31909 171.83911 67.09644 171.97803 68.76343 172.11694 68.90234 172.25586
69.04126 172.53369 69.04126 172.6726 68.76343 172.81152 69.59692 172.95044
69.18018 173.08936 69.45801 173.36719 70.43042 173.5061 69.73584 173.64502
69.87476 173.78394 69.87476 173.92285 69.73584 174.20068 70.15259 174.3396
69.87476 174.47852 69.87476 174.61743 70.2915 174.75635 70.70825 174.89526
70.70825 175.1731 70.70825 175.31201 70.01367 175.45093 70.15259 175.58984
70.56934 175.72876 70.15259 176.00659 70.43042 176.14551 70.56934 176.28442
70.84717 176.42334 70.70825 176.56226 70.70825 176.84009 70.98608 176.979
71.125 177.11792 70.2915 177.25684 71.125 177.39575 71.125 177.67358
70.43042 177.8125 70.70825 177.95142 70.98608 178.09033 70.70825 178.22925
70.70825 178.36816 71.54175 178.646 71.40283 178.78491 71.125 178.92383
71.81958 179.06274 71.40283 179.20166 71.40283 179.47949 71.54175 179.61841
71.40283 179.75732 71.54175 179.89624 71.54175 180.03516 71.54175 180.31299
72.23633 180.4519 72.09741 180.59082 72.09741 180.72974 71.9585 180.86865
72.23633 181.14648 71.9585 181.2854 72.23633 181.42432 71.81958 181.56323
72.23633 181.70215 72.51416 181.84106 72.09741 182.1189 72.37524 182.25781
72.37524 182.39673 72.51416 182.53564 72.65308 182.67456 72.79199 182.9524
72.37524 183.09131 72.93091 183.23022 72.65308 183.36914 72.37524 183.50806
72.65308 183.78589 72.93091 183.9248 73.06982 184.06372 73.06982 184.20264
72.93091 184.34155 73.20874 184.48047 72.93091 184.7583 73.06982 184.89722
72.93091 185.03613 73.48657 185.17505 73.7644 185.31396 72.79199 185.5918
70.98608 185.73071 74.04224 185.86963 73.06982 186.00854 73.06982 186.14746
74.32007 186.4253 74.18115 186.56421 73.06982 186.70313 73.7644 186.84204
77.51514 186.98096 74.18115 187.25879 74.18115 187.3977 74.5979 187.53662
73.90332 187.67554 73.34766 187.81445 73.7644 187.95337 73.34766 188.2312
74.73682 188.37012 73.7644 188.50903 71.81958 188.64795 74.45898 188.78687
74.18115 189.0647 73.48657 189.20361 74.87573 189.34253 74.45898 189.48145
73.90332 189.62036 75.4314 189.8982 75.01465 190.03711 74.87573 190.17603
72.09741 190.31494 73.90332 190.45386 74.32007 190.73169 74.18115 190.8706
74.45898 191.00952 75.01465 191.14844 74.45898 191.28735 75.01465 191.42627
75.15356 191.7041 74.45898 191.84302 67.79102 191.98193 75.4314 192.12085
75.01465 192.25977 72.09741 192.5376 76.40381 192.67651 74.5979 192.81543
75.01465 192.95435 78.0708 193.09326 75.29248 193.3711 74.87573 193.51001
76.12598 193.64893 75.70923 193.78784 75.98706 193.92676 75.29248 194.06567
74.73682 194.3435 75.57031 194.48242 75.15356 194.62134 75.01465 194.76025
75.98706 194.89917 75.4314 195.177 75.15356 195.31592 70.70825 195.45483
76.68164 195.59375 76.95947 195.73267 75.4314 196.0105 76.68164 196.14941
75.57031 196.28833 75.57031 196.42725 75.4314 196.56616 75.84814 196.844
75.70923 196.98291 76.54272 197.12183 75.84814 197.26074 75.84814 197.39966
75.70923 197.53857 71.9585 197.8164 75.84814 197.95532 76.82056 198.09424
76.12598 198.23315 76.95947 198.37207 76.2649 198.6499 76.54272 198.78882
77.09839 198.92773 76.82056 199.06665 76.12598 199.20557 72.09741 199.4834
74.73682 199.62231 78.0708 199.76123 80.43237 199.90015 80.98804 200.03906
89.87866 200.3169 65.0127 200.45581 72.23633 200.59473 90.85107 200.73364
73.06982 200.87256 79.87671 201.01147 78.0708 201.2893 68.76343 201.42822
76.95947 201.56714 75.4314 201.70605 78.0708 201.84497 78.76538 202.1228
80.43237 202.26172 91.68457 202.40063 67.6521 202.53955 77.65405 202.67847
97.38013 202.9563 74.04224 203.09521 82.79395 203.23413 77.37622 203.37305
66.40186 203.51196 75.15356 203.65088 75.29248 203.92871 80.7102 204.06763
83.34961 204.20654 79.32104 204.34546 79.45996 204.48438 87.93384 204.7622
85.57227 204.90112 73.7644 205.04004 78.34863 205.17896 73.20874 205.31787
67.09644 205.5957 73.20874 205.73462 73.90332 205.87354 80.15454 206.01245
83.34961 206.15137 84.32202 206.4292 91.9624 206.56812 79.87671 206.70703
84.32202 206.84595 80.29346 206.98486 73.20874 207.12378 75.29248 207.40161
75.98706 207.54053 71.26392 207.67944 72.65308 207.81836 77.2373 207.95728
80.29346 208.2351 85.29443 208.37402 88.4895 208.51294 91.54565 208.65186
76.2649 208.79077 82.93286 209.0686 84.46094 209.20752 75.84814 209.34644
79.87671 209.48535 76.40381 209.62427 70.43042 209.9021 72.51416 210.04102
75.70923 210.17993 80.15454 210.31885 84.04419 210.45776 92.10132 210.59668
89.46191 210.87451 76.95947 211.01343 87.656 211.15234 84.46094 211.29126
76.54272 211.43018 81.12695 211.70801 77.09839 211.84692 69.45801 211.98584
75.84814 212.12476 75.4314 212.26367 80.01563 212.5415 83.2107 212.68042
92.51807 212.81934 95.71313 212.95825 75.15356 213.09717 84.73877 213.23608
83.76636 213.51392 74.73682 213.65283 80.84912 213.79175 82.23828 213.93066
68.06885 214.06958 70.98608 214.34741 78.34863 214.48633 76.54272 214.62524
81.12695 214.76416 90.85107 214.90308 99.7417 215.18091 89.18408 215.31982
76.95947 215.45874 86.40576 215.59766 80.98804 215.73657 75.98706 216.0144
84.73877 216.15332 79.18213 216.29224 70.98608 216.43115 76.2649 216.57007
76.54272 216.70898 77.2373 216.98682 86.96143 217.12573 96.82446 217.26465
93.49048 217.40356 81.40479 217.54248 86.54468 217.82031 83.07178 217.95923
81.40479 218.09814 82.23828 218.23706 82.3772 218.37598 73.62549 218.65381
74.5979 218.79272 79.87671 218.93164 78.48755 219.07056 83.62744 219.20947
93.6294 219.4873 96.96338 219.62622 83.90527 219.76514 82.23828 219.90405
85.29443 220.04297 83.07178 220.18188 80.7102 220.45972 82.51611 220.59863
80.43237 220.73755 75.29248 220.87646 77.09839 221.01538 80.15454 221.29321
79.32104 221.43213 86.12793 221.57104 91.68457 221.70996 91.82349 221.84888
83.62744 222.12671 83.2107 222.26563 83.90527 222.40454 83.34961 222.54346
82.65503 222.68237 83.62744 222.82129 80.15454 223.09912 80.15454 223.23804
83.07178 223.37695 81.26587 223.51587 83.62744 223.65479 88.4895 223.93262
89.46191 224.07153 90.57324 224.21045 84.73877 224.34937 83.90527 224.48828
84.1831 224.76611 83.90527 224.90503 80.84912 225.04395 83.62744 225.18286
81.40479 225.32178 81.12695 225.59961 83.76636 225.73853 84.59985 225.87744
85.0166 226.01636 85.0166 226.15527 83.62744 226.29419 84.59985 226.57202
85.43335 226.71094 84.73877 226.84985 85.43335 226.98877 85.15552 227.12769
84.32202 227.40552 84.1831 227.54443 79.45996 227.68335 84.32202 227.82227
82.79395 227.96118 84.32202 228.23901 87.93384 228.37793 88.62842 228.51685
84.46094 228.65576 85.57227 228.79468 86.40576 229.07251 85.57227 229.21143
85.8501 229.35034 90.29541 229.48926 83.2107 229.62817 86.40576 229.76709
82.93286 230.04492 83.34961 230.18384 91.1289 230.32275 86.54468 230.46167
88.90625 230.60059 85.29443 230.87842 85.71118 231.01733 85.15552 231.15625
91.54565 231.29517 82.51611 231.43408 81.96045 231.71191 89.73975 231.85083
86.6836 231.98975 86.6836 232.12866 87.10034 232.26758 85.71118 232.4065
83.07178 232.68433 86.54468 232.82324 88.90625 232.96216 83.2107 233.10107
88.90625 233.23999 84.32202 233.51782 87.10034 233.65674 86.40576 233.79565
86.96143 233.93457 83.48853 234.07349 89.87866 234.35132 86.82251 234.49023
92.10132 234.62915 85.98901 234.76807 86.12793 234.90698 95.85205 235.18481
86.12793 235.32373 84.59985 235.46265 86.40576 235.60156 88.21167 235.74048
91.82349 235.8794 86.54468 236.15723 83.34961 236.29614 85.15552 236.43506
90.57324 236.57397 90.1565 236.71289 86.82251 236.99072 87.51709 237.12964
91.9624 237.26855 94.18506 237.40747 84.87769 237.54639 87.37817 237.82422
91.54565 237.96313 88.90625 238.10205 86.96143 238.24097 83.62744 238.37988
90.98999 238.65771 80.29346 238.79663 93.76831 238.93555 91.54565 239.07446
88.76733 239.21338 88.76733 239.3523 87.79492 239.63013 87.656 239.76904
93.35156 239.90796 86.26685 240.04688 88.62842 240.18579 88.21167 240.46362
91.26782 240.60254 92.65698 240.74146 93.6294 240.88037 91.68457 241.01929
83.62744 241.29712 87.79492 241.43604 92.7959 241.57495 89.323 241.71387
95.71313 241.85278 88.35059 241.9917 89.323 242.26953 85.8501 242.40845
92.37915 242.54736 86.6836 242.68628 88.62842 242.8252 89.87866 243.10303
87.10034 243.24194 89.18408 243.38086 95.85205 243.51978 84.46094 243.65869
93.49048 243.93652 85.71118 244.07544 89.73975 244.21436 95.99097 244.35327
86.40576 244.49219 87.37817 244.77002 90.85107 244.90894 89.46191 245.04785
87.10034 245.18677 97.65796 245.32568 82.65503 245.4646 95.99097 245.74243
89.87866 245.88135 89.04517 246.02026 86.54468 246.15918 85.8501 246.2981
97.65796 246.57593 90.1565 246.71484 90.43433 246.85376 86.26685 246.99268
95.71313 247.13159 90.1565 247.40942 90.98999 247.54834 87.51709 247.68726
93.76831 247.82617 89.87866 247.96509 96.96338 248.24292 86.6836 248.38184
94.6018 248.52075 86.96143 248.65967 93.21265 248.79858 84.73877 248.9375
91.40674 249.21533 90.43433 249.35425 90.57324 249.49316 97.93579 249.63208
84.1831 249.771 101.68652 250.04883 91.54565 250.18774 90.1565 250.32666
91.1289 250.46558 86.82251 250.60449 95.01855 250.88232 95.4353 251.02124
94.6018 251.16016 90.57324 251.29907 96.2688 251.43799 89.04517 251.5769
96.68555 251.85474 92.51807 251.99365 91.54565 252.13257 97.24121 252.27148
88.62842 252.4104 95.57422 252.68823 88.35059 252.82715 92.65698 252.96606
91.1289 253.10498 91.82349 253.2439 93.07373 253.52173 91.40674 253.66064
91.68457 253.79956 92.10132 253.93848 96.2688 254.0774 89.18408 254.35522
87.10034 254.49414 97.51904 254.63306 95.15747 254.77197 88.07275 254.91089
92.7959 255.0498 95.99097 255.32764 89.04517 255.46655 89.87866 255.60547
97.93579 255.74438 92.10132 255.8833 93.07373 256.16113 98.63037 256.30005
92.37915 256.43896 91.9624 256.57788 98.49146 256.7168 87.93384 256.99463
93.21265 257.13354 94.18506 257.27246 92.37915 257.41138 90.1565 257.5503
96.96338 257.82813 93.6294 257.96704 89.46191 258.10596 90.57324 258.24487
94.18506 258.38379 93.76831 258.5227 89.18408 258.80054 90.01758 258.93945
90.57324 259.07837 93.49048 259.21729 94.74072 259.3562 96.82446 259.63403
93.90723 259.77295 94.6018 259.91187 97.65796 260.05078 93.90723 260.1897
93.21265 260.46753 93.49048 260.60645 91.40674 260.74536 93.6294 260.88428
91.54565 261.0232 91.82349 261.16211 93.90723 261.43994 91.68457 261.57886
93.76831 261.71777 94.6018 261.85669 95.01855 261.9956 95.15747 262.27344
97.24121 262.41235 92.10132 262.55127 95.4353 262.69019 94.32397 262.8291
94.32397 263.10693 97.65796 263.24585 92.51807 263.38477 94.18506 263.52368
99.7417 263.6626 94.32397 263.94043 92.10132 264.07935 95.29639 264.21826
98.0747 264.35718 95.99097 264.4961 95.01855 264.63501 92.51807 264.91284
94.87964 265.05176 95.57422 265.19067 96.12988 265.32959 95.29639 265.4685
95.85205 265.74634 94.74072 265.88525 98.0747 266.02417 95.4353 266.16309
95.57422 266.302 95.29639 266.57983 93.21265 266.71875 95.57422 266.85767
95.85205 266.99658 99.04712 267.1355 96.2688 267.41333 95.15747 267.55225
95.85205 267.69116 96.54663 267.83008 97.24121 267.969 95.15747 268.10791
95.85205 268.38574 95.99097 268.52466 96.2688 268.66357 95.85205 268.80249
95.71313 268.9414 95.85205 269.21924 96.40771 269.35815 96.2688 269.49707
96.54663 269.63599 95.85205 269.7749 97.24121 270.05273 96.40771 270.19165
96.54663 270.33057 96.40771 270.46948 96.82446 270.6084 97.1023 270.74731
96.68555 271.02515 96.54663 271.16406 96.40771 271.30298 96.68555 271.4419
97.51904 271.58081 96.68555 271.85864 97.24121 271.99756 97.1023 272.13647
96.96338 272.27539 97.24121 272.4143 97.51904 272.69214 97.51904 272.83105
96.96338 272.96997 97.24121 273.10889 97.38013 273.2478 97.65796 273.52563
97.93579 273.66455 98.0747 273.80347 97.93579 273.94238 98.21362 274.0813
98.0747 274.22021 98.0747 274.49805 98.0747 274.63696 98.21362 274.77588
98.0747 274.9148 98.0747 275.05371 98.0747 275.33154 98.49146 275.47046
98.76929 275.60938 98.49146 275.74829 98.76929 275.8872 98.63037 276.16504
99.18604 276.30396 98.63037 276.44287 98.35254 276.58179 98.49146 276.7207
98.9082 276.99854 98.76929 277.13745 98.49146 277.27637 98.9082 277.41528
99.04712 277.5542 98.9082 277.69312 98.9082 277.97095 99.18604 278.10986
99.60278 278.24878 99.18604 278.3877 99.18604 278.52661 99.32495 278.80444
99.04712 278.94336 99.46387 279.08228 99.32495 279.22119 99.18604 279.3601
99.46387 279.63794 99.7417 279.77686 99.46387 279.91577 99.60278 280.05469
99.88062 280.1936 100.29736 280.33252 99.46387 280.61035 99.32495 280.74927
99.60278 280.88818 99.7417 281.0271 100.01953 281.16602 100.01953 281.44385
99.88062 281.58276 99.88062 281.72168 99.88062 281.8606 100.15845 281.99951
100.01953 282.27734 99.7417 282.41626 99.60278 282.55518 100.01953
282.69409 100.5752 282.83301 100.29736 283.11084 100.15845 283.24976
100.01953 283.38867 100.01953 283.52759 100.71411 283.6665 100.43628
283.80542 100.5752 284.08325 100.5752 284.22217 100.15845 284.36108
100.85303 284.5 100.5752 284.63892 100.99194 284.91675 100.85303 285.05566
101.13086 285.19458 100.99194 285.3335 100.85303 285.47241 100.85303
285.75024 100.85303 285.88916 100.71411 286.02808 100.85303 286.16699
101.13086 286.30591 101.40869 286.58374 101.96436 286.72266 101.82544
286.86157 101.96436 287.00049 101.26978 287.1394 101.40869 287.27832
101.68652 287.55615 102.10327 287.69507 101.40869 287.83398 101.40869
287.9729 102.10327 288.11182 101.82544 288.38965 102.10327 288.52856
101.68652 288.66748 101.13086 288.8064 101.82544 288.94531 101.96436
289.22314 101.68652 289.36206 102.24219 289.50098 101.96436 289.6399
101.96436 289.77881 102.24219 289.91772 102.52002 290.19556 102.52002
290.33447 102.65894 290.47339 103.07568 290.6123 102.79785 290.75122
102.93677 291.02905 102.65894 291.16797 102.52002 291.30688 102.24219
291.4458 102.65894 291.58472 102.24219 291.86255 102.52002 292.00146
102.52002 292.14038 102.79785 292.2793 102.93677 292.41821 102.79785
292.69604 102.52002 292.83496 102.79785 292.97388 103.07568 293.1128
102.79785 293.25171 102.93677 293.39063 102.79785 293.66846 102.65894
293.80737 103.35352 293.94629 103.07568 294.0852 100.99194 294.22412
103.07568 294.50195 102.79785 294.64087 102.93677 294.77979 103.2146
294.9187 103.2146 295.05762 103.49243 295.33545 103.07568 295.47437
103.35352 295.61328 103.2146 295.7522 103.35352 295.89111 103.49243
296.16895 103.2146 296.30786 103.90918 296.44678 103.63135 296.5857
103.49243 296.72461 103.49243 296.86353 103.49243 297.14136 103.63135
297.28027 103.49243 297.41919 104.0481 297.5581 104.60376 297.69702
103.63135 297.97485 104.46484 298.11377 104.18701 298.25269 103.77026
298.3916 104.46484 298.53052 104.18701 298.80835 104.46484 298.94727
104.0481 299.08618 104.18701 299.2251 104.0481 299.36401 104.74268
299.50293 104.88159 299.78076 104.88159 299.91968 105.15942 300.0586
104.74268 300.19751 104.88159 300.33643 104.60376 300.61426 105.43726
300.75317 105.29834 300.89209 105.71509 301.031 105.57617 301.16992
105.57617 301.44775 105.43726 301.58667 105.57617 301.72559 105.43726
301.8645 105.71509 302.00342 105.71509 302.28125 105.99292 302.42017
105.29834 302.55908 105.15942 302.698 105.854 302.83691 105.99292 302.97583
105.99292 303.25366 105.57617 303.39258 105.43726 303.5315 106.27075
303.67041 106.13184 303.80933 106.82642 304.08716 106.54858 304.22607
106.54858 304.36499 106.40967 304.08716 106.6875 303.94824 106.82642
303.80933 106.82642 303.5315 107.10425 303.39258 106.40967 303.25366
106.54858 303.11475 105.71509 302.97583 105.854 302.698 106.27075 302.55908
106.27075 302.42017 106.13184 302.28125 105.43726 302.14233 105.57617
302.00342 106.27075 301.72559 105.99292 301.58667 105.99292 301.44775
105.71509 301.30884 105.854 301.16992 105.71509 300.89209 105.854 300.75317
105.854 300.61426 105.99292 300.47534 105.57617 300.33643 105.71509
300.0586 104.88159 299.91968 105.15942 299.78076 105.02051 299.64185
105.43726 299.50293 105.15942 299.2251 105.15942 299.08618 105.02051
298.94727 104.32593 298.80835 104.46484 298.66943 104.32593 298.53052
104.74268 298.25269 104.46484 298.11377 104.74268 297.97485 104.0481
297.83594 104.46484 297.69702 104.74268 297.41919 103.90918 297.28027
104.88159 297.14136 104.32593 297.00244 103.77026 296.86353 103.90918
296.5857 103.77026 296.44678 103.77026 296.30786 103.77026 296.16895
103.90918 296.03003 104.18701 295.89111 103.49243 295.61328 103.77026
295.47437 103.63135 295.33545 103.49243 295.19653 103.63135 295.05762
103.35352 294.77979 103.77026 294.64087 103.49243 294.50195 103.49243
294.36304 103.2146 294.22412 103.07568 293.94629 103.35352 293.80737
101.26978 293.66846 103.35352 293.52954 103.63135 293.39063 102.93677
293.1128 103.07568 292.97388 103.2146 292.83496 103.07568 292.69604
103.35352 292.55713 103.07568 292.41821 102.79785 292.14038 103.07568
292.00146 103.2146 291.86255 103.07568 291.72363 102.79785 291.58472
102.79785 291.30688 102.52002 291.16797 102.93677 291.02905 102.52002
290.89014 102.79785 290.75122 102.93677 290.47339 103.2146 290.33447
103.07568 290.19556 103.35352 290.05664 102.93677 289.91772 102.79785
289.6399 102.79785 289.50098 102.52002 289.36206 102.24219 289.22314
102.24219 289.08423 102.52002 288.94531 101.96436 288.66748 102.24219
288.52856 102.10327 288.38965 101.40869 288.25073 101.96436 288.11182
102.3811 287.83398 102.10327 287.69507 102.3811 287.55615 101.68652
287.41724 101.68652 287.27832 102.3811 287.00049 101.96436 286.86157
101.68652 286.72266 101.5476 286.58374 102.24219 286.44482 102.10327
286.30591 102.24219 286.02808 101.68652 285.88916 101.40869 285.75024
101.13086 285.61133 100.99194 285.47241 101.13086 285.19458 101.13086
285.05566 101.13086 284.91675 101.26978 284.77783 101.40869 284.63892
101.13086 284.36108 101.26978 284.22217 100.85303 284.08325 101.13086
283.94434 100.43628 283.80542 100.85303 283.52759 100.85303 283.38867
100.71411 283.24976 100.99194 283.11084 100.29736 282.97192 100.29736
282.83301 100.43628 282.55518 100.5752 282.41626 100.85303 282.27734
100.29736 282.13843 99.88062 281.99951 100.01953 281.72168 100.29736
281.58276 100.43628 281.44385 100.15845 281.30493 100.15845 281.16602
100.15845 280.88818 100.29736 280.74927 100.29736 280.61035 100.01953
280.47144 99.88062 280.33252 99.60278 280.05469 99.7417 279.91577 100.5752
279.77686 100.15845 279.63794 99.88062 279.49902 99.7417 279.3601 100.01953
279.08228 99.7417 278.94336 99.46387 278.80444 99.60278 278.66553 99.7417
278.52661 99.32495 278.24878 99.60278 278.10986 99.46387 277.97095
99.46387 277.83203 99.88062 277.69312 99.46387 277.41528 99.18604 277.27637
99.18604 277.13745 99.32495 276.99854 99.18604 276.85962 98.76929 276.7207
99.04712 276.44287 99.18604 276.30396 98.76929 276.16504 98.63037 276.02612
98.9082 275.8872 99.46387 275.60938 98.9082 275.47046 99.04712 275.33154
98.76929 275.19263 99.04712 275.05371 98.76929 274.77588 98.35254 274.63696
98.35254 274.49805 98.35254 274.35913 98.49146 274.22021 98.35254 273.94238
98.35254 273.80347 98.35254 273.66455 98.49146 273.52563 98.21362 273.38672
98.35254 273.2478 98.21362 272.96997 97.93579 272.83105 97.65796 272.69214
97.51904 272.55322 97.24121 272.4143 97.79688 272.13647 97.79688 271.99756
97.51904 271.85864 97.24121 271.71973 97.38013 271.58081 97.51904 271.30298
96.96338 271.16406 97.79688 271.02515 96.96338 270.88623 96.68555 270.74731
96.82446 270.46948 96.96338 270.33057 97.38013 270.19165 97.1023 270.05273
96.68555 269.91382 96.82446 269.7749 96.68555 269.49707 97.51904 269.35815
96.12988 269.21924 96.82446 269.08032 96.54663 268.9414 96.68555 268.66357
96.12988 268.52466 95.99097 268.38574 96.12988 268.24683 96.54663 268.10791
96.2688 267.83008 96.12988 267.69116 95.4353 267.55225 97.51904 267.41333
96.82446 267.27441 96.12988 267.1355 95.4353 266.85767 96.54663 266.71875
99.32495 266.57983 96.12988 266.44092 95.85205 266.302 93.49048 266.02417
95.57422 265.88525 95.85205 265.74634 95.71313 265.60742 98.35254 265.4685
95.01855 265.19067 96.12988 265.05176 95.57422 264.91284 96.40771 264.77393
95.85205 264.63501 95.15747 264.35718 92.7959 264.21826 95.29639 264.07935
96.2688 263.94043 98.35254 263.80151 95.57422 263.6626 92.37915 263.38477
94.6018 263.24585 100.01953 263.10693 94.46289 262.96802 92.7959 262.8291
97.93579 262.55127 94.6018 262.41235 94.6018 262.27344 95.71313 262.13452
92.37915 261.9956 97.51904 261.71777 95.4353 261.57886 95.29639 261.43994
94.87964 261.30103 94.04614 261.16211 91.9624 260.88428 94.18506 260.74536
92.10132 260.60645 91.82349 260.46753 93.90723 260.32861 91.68457 260.1897
93.76831 259.91187 93.49048 259.77295 94.18506 259.63403 97.93579 259.49512
94.87964 259.3562 94.18506 259.07837 97.1023 258.93945 95.01855 258.80054
93.76831 258.66162 90.85107 258.5227 90.29541 258.24487 89.46191 258.10596
94.04614 257.96704 94.46289 257.82813 90.85107 257.68921 89.73975 257.5503
93.90723 257.27246 97.24121 257.13354 90.43433 256.99463 92.65698 256.85571
94.46289 256.7168 93.49048 256.43896 88.21167 256.30005 98.76929 256.16113
92.24023 256.02222 92.65698 255.8833 98.9082 255.60547 93.35156 255.46655
92.37915 255.32764 98.21362 255.18872 90.1565 255.0498 89.323 254.77197
96.2688 254.63306 93.07373 254.49414 88.35059 254.35522 95.4353 254.21631
97.79688 254.0774 87.37817 253.79956 89.46191 253.66064 96.54663 253.52173
92.37915 253.38281 91.9624 253.2439 91.68457 252.96606 93.35156 252.82715
92.10132 252.68823 91.40674 252.54932 92.93481 252.4104 88.62842 252.13257
95.85205 251.99365 88.90625 251.85474 97.51904 251.71582 91.82349 251.5769
92.7959 251.29907 96.96338 251.16016 89.323 251.02124 96.54663 250.88232
90.85107 250.74341 94.87964 250.60449 95.71313 250.32666 95.29639 250.18774
87.10034 250.04883 91.40674 249.90991 90.43433 249.771 91.82349 249.49316
101.96436 249.35425 84.46094 249.21533 98.21362 249.07642 90.85107
248.9375 90.71216 248.65967 91.68457 248.52075 85.0166 248.38184 93.49048
248.24292 87.23926 248.104 94.87964 247.96509 86.96143 247.68726 97.24121
247.54834 90.1565 247.40942 94.04614 247.27051 87.79492 247.13159 91.26782
246.85376 90.43433 246.71484 95.99097 246.57593 86.54468 246.43701
90.71216 246.2981 90.43433 246.02026 97.93579 245.88135 86.12793 245.74243
86.82251 245.60352 89.323 245.4646 90.1565 245.18677 96.2688 245.04785
82.93286 244.90894 97.93579 244.77002 87.37817 244.6311 89.73975 244.49219
91.1289 244.21436 87.656 244.07544 86.6836 243.93652 96.2688 243.7976
90.01758 243.65869 85.98901 243.38086 93.76831 243.24194 84.73877 243.10303
96.12988 242.96411 89.46191 242.8252 87.37817 242.54736 90.1565 242.40845
88.90625 242.26953 86.96143 242.13062 92.65698 241.9917 86.12793 241.71387
89.60083 241.57495 88.62842 241.43604 95.99097 241.29712 89.60083 241.1582
93.07373 241.01929 88.07275 240.74146 83.90527 240.60254 91.9624 240.46362
93.90723 240.3247 92.93481 240.18579 91.54565 239.90796 88.4895 239.76904
88.90625 239.63013 86.54468 239.49121 93.6294 239.3523 87.93384 239.07446
88.07275 238.93555 89.04517 238.79663 89.04517 238.65771 91.82349 238.5188
94.04614 238.37988 80.57129 238.10205 91.26782 237.96313 83.90527 237.82422
87.23926 237.6853 89.18408 237.54639 91.82349 237.26855 87.656 237.12964
85.15552 236.99072 94.46289 236.8518 92.24023 236.71289 87.79492 236.43506
87.10034 236.29614 90.43433 236.15723 90.85107 236.01831 85.43335 235.8794
83.62744 235.60156 86.82251 235.46265 92.10132 235.32373 88.4895 235.18481
86.6836 235.0459 84.87769 234.90698 86.40576 234.62915 96.12988 234.49023
86.40576 234.35132 86.26685 234.2124 92.37915 234.07349 87.10034 233.79565
90.1565 233.65674 83.76636 233.51782 87.23926 233.3789 86.6836 233.23999
87.37817 232.96216 84.59985 232.82324 89.18408 232.68433 83.48853 232.54541
89.18408 232.4065 86.82251 232.12866 83.34961 231.98975 85.98901 231.85083
87.37817 231.71191 86.96143 231.573 86.96143 231.43408 90.01758 231.15625
82.23828 231.01733 82.79395 230.87842 91.82349 230.7395 85.43335 230.60059
85.98901 230.32275 85.57227 230.18384 89.18408 230.04492 86.82251 229.906
91.40674 229.76709 83.62744 229.48926 83.2107 229.35034 86.6836 229.21143
83.48853 229.07251 90.57324 228.9336 86.12793 228.79468 85.8501 228.51685
86.6836 228.37793 85.8501 228.23901 84.73877 228.1001 88.90625 227.96118
88.21167 227.68335 84.59985 227.54443 83.07178 227.40552 84.59985 227.2666
79.7378 227.12769 84.46094 226.84985 84.59985 226.71094 85.43335 226.57202
85.71118 226.4331 85.0166 226.29419 85.71118 226.01636 84.87769 225.87744
83.90527 225.73853 85.29443 225.59961 85.29443 225.4607 84.87769 225.32178
84.04419 225.04395 81.40479 224.90503 81.68262 224.76611 83.90527 224.6272
81.12695 224.48828 84.1831 224.21045 84.46094 224.07153 84.1831 223.93262
85.0166 223.7937 90.85107 223.65479 89.73975 223.37695 88.76733 223.23804
83.90527 223.09912 81.5437 222.9602 83.34961 222.82129 80.43237 222.54346
80.43237 222.40454 83.90527 222.26563 82.93286 222.12671 83.62744 221.9878
84.1831 221.84888 83.48853 221.57104 83.90527 221.43213 92.10132 221.29321
91.9624 221.1543 86.40576 221.01538 79.59888 220.73755 80.43237 220.59863
77.37622 220.45972 75.57031 220.3208 80.7102 220.18188 82.79395 219.90405
80.98804 219.76514 83.34961 219.62622 85.57227 219.4873 82.51611 219.34839
84.1831 219.20947 97.24121 218.93164 93.90723 218.79272 83.90527 218.65381
78.76538 218.5149 80.15454 218.37598 74.87573 218.09814 73.90332 217.95923
82.65503 217.82031 82.51611 217.6814 81.68262 217.54248 83.34961 217.26465
86.82251 217.12573 81.68262 216.98682 93.76831 216.8479 97.1023 216.70898
87.23926 216.43115 77.51514 216.29224 76.82056 216.15332 76.54272 216.0144
71.26392 215.87549 79.45996 215.73657 85.0166 215.45874 76.2649 215.31982
81.26587 215.18091 86.6836 215.04199 77.2373 214.90308 89.46191 214.62524
100.01953 214.48633 91.1289 214.34741 81.40479 214.2085 76.82056 214.06958
78.62646 213.79175 71.26392 213.65283 68.34668 213.51392 82.51611 213.375
81.12695 213.23608 75.01465 212.95825 84.04419 212.81934 85.0166 212.68042
75.4314 212.5415 95.99097 212.40259 92.7959 212.26367 83.48853 211.98584
80.29346 211.84692 75.70923 211.70801 76.12598 211.56909 69.73584 211.43018
77.37622 211.15234 81.40479 211.01343 76.82056 210.87451 84.73877 210.7356
87.93384 210.59668 77.2373 210.31885 89.73975 210.17993 92.37915 210.04102
84.32202 209.9021 80.43237 209.76318 75.98706 209.62427 72.79199 209.34644
70.70825 209.20752 76.68164 209.0686 80.15454 208.92969 76.12598 208.79077
84.73877 208.51294 83.2107 208.37402 76.54272 208.2351 91.82349 208.09619
88.76733 207.95728 85.57227 207.67944 80.57129 207.54053 77.51514 207.40161
72.93091 207.2627 71.54175 207.12378 76.2649 206.84595 75.57031 206.70703
73.48657 206.56812 80.57129 206.4292 84.59985 206.29028 80.15454 206.15137
92.24023 205.87354 84.59985 205.73462 83.62744 205.5957 80.43237 205.45679
74.18115 205.31787 73.48657 205.04004 67.37427 204.90112 73.48657 204.7622
78.62646 204.62329 74.04224 204.48438 85.8501 204.20654 88.21167 204.06763
79.7378 203.92871 79.59888 203.7898 83.62744 203.65088 80.98804 203.37305
75.57031 203.23413 75.4314 203.09521 66.67969 202.9563 77.65405 202.81738
83.07178 202.67847 74.32007 202.40063 97.65796 202.26172 77.93188 202.1228
67.92993 201.98389 91.9624 201.84497 80.7102 201.56714 79.04321 201.42822
78.34863 201.2893 75.70923 201.15039 77.2373 201.01147 69.04126 200.73364
78.34863 200.59473 80.15454 200.45581 73.34766 200.3169 91.1289 200.17798
72.51416 200.03906 65.29053 199.76123 90.1565 199.62231 81.26587 199.4834
80.7102 199.34448 78.34863 199.20557 75.01465 198.92773 72.37524 198.78882
76.40381 198.6499 77.09839 198.51099 77.37622 198.37207 76.82056 198.09424
76.54272 197.95532 77.2373 197.8164 76.40381 197.67749 77.09839 197.53857
76.12598 197.26074 72.23633 197.12183 75.98706 196.98291 76.12598 196.844
76.12598 196.70508 76.82056 196.56616 75.98706 196.28833 76.12598 196.14941
75.70923 196.0105 75.84814 195.87158 75.84814 195.73267 76.95947 195.45483
75.70923 195.31592 77.2373 195.177 76.95947 195.03809 70.98608 194.89917
75.4314 194.62134 75.70923 194.48242 76.2649 194.3435 75.29248 194.20459
75.4314 194.06567 75.84814 193.78784 75.01465 193.64893 75.57031 193.51001
76.2649 193.3711 75.98706 193.23218 76.40381 193.09326 75.15356 192.81543
75.57031 192.67651 78.34863 192.5376 75.29248 192.39868 74.87573 192.25977
76.68164 191.98193 72.37524 191.84302 75.29248 191.7041 75.70923 191.56519
68.06885 191.42627 74.73682 191.14844 75.4314 191.00952 75.29248 190.8706
74.73682 190.73169 75.29248 190.59277 74.73682 190.45386 74.45898 190.17603
74.5979 190.03711 74.18115 189.8982 72.37524 189.75928 75.15356 189.62036
75.29248 189.34253 75.70923 189.20361 74.18115 189.0647 74.73682 188.92578
75.15356 188.78687 73.7644 188.50903 74.45898 188.37012 74.73682 188.2312
72.09741 188.09229 74.04224 187.95337 75.01465 187.67554 73.62549 187.53662
74.04224 187.3977 73.62549 187.25879 74.18115 187.11987 74.87573 186.98096
74.45898 186.70313 74.45898 186.56421 77.79297 186.4253 74.04224 186.28638
73.34766 186.14746 74.45898 185.86963 74.5979 185.73071 73.34766 185.5918
73.34766 185.45288 74.32007 185.31396 71.26392 185.03613 73.06982 184.89722
74.04224 184.7583 73.7644 184.61938 73.20874 184.48047 73.34766 184.20264
73.20874 184.06372 73.48657 183.9248 73.20874 183.78589 73.34766 183.64697
73.34766 183.50806 73.20874 183.23022 72.93091 183.09131 72.65308 182.9524
72.93091 182.81348 73.20874 182.67456 72.65308 182.39673 73.06982 182.25781
72.93091 182.1189 72.79199 181.97998 72.65308 181.84106 72.65308 181.56323
72.37524 181.42432 72.79199 181.2854 72.51416 181.14648 72.09741 181.00757
72.51416 180.86865 72.23633 180.59082 72.51416 180.4519 72.23633 180.31299
72.37524 180.17407 72.37524 180.03516 72.51416 179.75732 71.81958 179.61841
71.81958 179.47949 71.81958 179.34058 71.68066 179.20166 71.81958 178.92383
71.68066 178.78491 71.68066 178.646 72.09741 178.50708 71.40283 178.36816
71.68066 178.09033 71.81958 177.95142 70.98608 177.8125 70.98608 177.67358
71.26392 177.53467 70.98608 177.39575 70.70825 177.11792 71.40283 176.979
71.40283 176.84009 70.56934 176.70117 71.40283 176.56226 71.26392 176.28442
70.98608 176.14551 70.98608 176.00659 71.125 175.86768 70.84717 175.72876
70.70825 175.45093 70.43042 175.31201 70.84717 175.1731 70.43042 175.03418
70.2915 174.89526 70.98608 174.61743 70.98608 174.47852 70.98608 174.3396
70.56934 174.20068 70.15259 174.06177 70.15259 173.92285 70.43042 173.64502
70.01367 173.5061 70.15259 173.36719 70.15259 173.22827 70.01367 173.08936
70.70825 172.81152 69.73584 172.6726 69.45801 172.53369 69.87476 172.39478
69.04126 172.25586 69.31909 171.97803 69.31909 171.83911 69.18018 171.7002
69.04126 171.56128 67.37427 171.42236 69.59692 171.28345 69.59692 171.00562
69.59692 170.8667 69.45801 170.72778 70.43042 170.58887 70.70825 170.44995
70.56934 170.17212 70.43042 170.0332 69.18018 169.89429 69.18018 169.75537
68.4856 169.61646 71.54175 169.33862 68.62451 169.1997 68.90234 169.06079
68.76343 168.92188 66.40186 168.78296 69.31909 168.50513 68.90234 168.36621
69.87476 168.2273 69.59692 168.08838 68.62451 167.94946 68.62451 167.81055
68.4856 167.53271 63.62354 167.3938 65.9851 167.25488 64.73486 167.11597
65.70728 166.97705 68.06885 166.69922 64.87378 166.5603 69.04126 166.42139
67.51318 166.28247 72.09741 166.14355 65.84619 165.86572 67.51318 165.7268
67.92993 165.58789 67.79102 165.44897 63.06787 165.31006 67.23535 165.03223
67.6521 164.89331 68.62451 164.7544 67.51318 164.61548 67.6521 164.47656
67.51318 164.33765 67.92993 164.05981 71.40283 163.9209 61.5398 163.78198
67.51318 163.64307 67.09644 163.50415 64.04028 163.22632 68.34668 163.0874
62.79004 162.94849 67.23535 162.80957 61.5398 162.67065 64.87378 162.39282
69.87476 162.2539 64.1792 162.11499 68.06885 161.97607 66.54077 161.83716
66.40186 161.69824 63.76245 161.42041 64.45703 161.2815 64.1792 161.14258
61.26196 161.00366 65.9851 160.86475 64.31812 160.58691 66.67969 160.448
65.9851 160.30908 67.51318 160.17017 69.04126 160.03125 62.65112 159.75342
65.9851 159.6145 62.79004 159.47559 65.9851 159.33667 62.5122 159.19775
65.70728 158.91992 63.48462 158.781 65.84619 158.64209 65.9851 158.50317
66.26294 158.36426 74.04224 158.22534 70.84717 157.94751 70.2915 157.8086
70.2915 157.66968 65.9851 157.53076 67.09644 157.39185 65.29053 157.11401
61.5398 156.9751 65.70728 156.83618 63.20679 156.69727 65.56836 156.55835
64.87378 156.28052 66.67969 156.1416 65.56836 156.00269 66.12402 155.86377
67.92993 155.72485 65.9851 155.44702 65.84619 155.3081 65.0127 155.16919
65.70728 155.03027 65.9851 154.89136 65.70728 154.75244 67.51318 154.47461
65.0127 154.3357 65.70728 154.19678 65.56836 154.05786 65.0127 153.91895
64.73486 153.64111 64.45703 153.5022 64.04028 153.36328 64.04028 153.22437
65.29053 153.08545 62.09546 152.80762 64.73486 152.6687 65.42944 152.52979
64.04028 152.39087 64.87378 152.25195 59.45605 152.11304 66.95752 151.8352
68.4856 151.69629 61.81763 151.55737 68.06885 151.41846 64.31812 151.27954
63.76245 151.00171 61.40088 150.8628 64.45703 150.72388 68.4856 150.58496
67.37427 150.44604 63.90137 150.16821 61.40088 150.0293 64.31812 149.89038
69.73584 149.75146 70.01367 149.61255 64.73486 149.33472 63.76245 149.1958
67.51318 149.05688 64.04028 148.91797 68.06885 148.77905 64.45703 148.64014
62.65112 148.3623 62.79004 148.22339 69.18018 148.08447 66.8186 147.94556
67.92993 147.80664 62.23438 147.52881 60.42847 147.3899 62.23438 147.25098
63.20679 147.11206 63.06787 146.97314 64.1792 146.69531 63.76245 146.5564
65.84619 146.41748 65.42944 146.27856 68.4856 146.13965 66.67969 145.86182
68.06885 145.7229 67.79102 145.58398 66.40186 145.44507 65.84619 145.30615
63.20679 145.16724 62.23438 144.8894 62.92896 144.75049 62.79004 144.61157
61.67871 144.47266 62.92896 144.33374 62.79004 144.05591 63.20679 143.91699
68.20776 143.77808 70.70825 143.63916 70.2915 143.50024 67.23535 143.22241
66.54077 143.0835 62.92896 142.94458 61.26196 142.80566 57.78906 142.66675
58.0669 142.38892 60.98413 142.25 61.95654 142.11108 62.5122 141.97217
66.12402 141.83325 64.1792 141.69434 65.56836 141.4165 73.06982 141.27759
69.31909 141.13867 66.26294 140.99976 61.12305 140.86084 57.2334 140.58301
53.34375 140.44409 53.34375 140.30518 58.20581 140.16626 61.12305 140.02734
60.42847 139.74951 65.0127 139.6106 61.40088 139.47168 61.26196 139.33276
70.70825 139.19385 72.51416 139.05493 64.87378 138.7771 57.65015 138.63818
53.48267 138.49927 51.1211 138.36035 54.45508 138.22144 60.01172 137.9436
60.7063 137.80469 59.73389 137.66577 63.90137 137.52686 61.26196 137.38794
60.15063 137.1101 73.06982 136.97119 73.62549 136.83228 61.40088 136.69336
54.45508 136.55444 51.53784 136.27661 53.34375 136.1377 53.7605 135.99878
60.56738 135.85986 60.56738 135.72095 59.0393 135.58203 64.04028 135.3042
60.15063 135.16528 58.90039 135.02637 76.82056 134.88745 69.31909 134.74854
58.90039 134.4707 50.42651 134.33179 50.14868 134.19287 48.48169 134.05396
52.927 133.91504 62.65112 133.6372 58.76147 133.49829 59.31714 133.35938
66.40186 133.22046 54.594 133.08154 71.81958 132.80371 73.90332 132.6648
67.23535 132.52588 56.3999 132.38696 53.06592 132.24805 52.51025 132.10913
52.23242 131.8313 58.34473 131.69238 59.8728 131.55347 57.78906 131.41455
65.0127 131.27563 58.0669 130.9978 58.20581 130.85889 73.48657 130.71997
63.06787 130.58105 61.40088 130.44214 51.95459 130.1643 51.95459 130.02539
45.28662 129.88647 54.31616 129.74756 58.20581 129.60864 57.2334 129.46973
61.5398 129.1919 55.14966 129.05298 57.37231 128.91406 68.62451 128.77515
58.76147 128.63623 64.1792 128.3584 51.1211 128.21948 51.53784 128.08057
41.11914 127.94165 50.98218 127.80273 57.37231 127.5249 56.67773 127.38599
62.92896 127.24707 63.62354 127.10815 61.5398 126.96924 75.15356 126.6914
57.65015 126.55249 66.67969 126.41357 50.2876 126.27466 52.927 126.13574
45.84229 125.99683 53.06592 125.719 55.01074 125.58008 56.3999 125.44116
56.26099 125.30225 59.73389 125.16333 59.31714 124.8855 69.59692 124.74658
65.0127 124.60767 57.2334 124.46875 56.95557 124.32983 51.1211 124.052
52.0935 123.91309 49.03735 123.77417 66.54077 123.63525 53.48267 123.49634
65.9851 123.2185 60.01172 123.07959 52.0935 122.94067 72.23633 122.80176
59.31714 122.66284 59.59497 122.52393 52.23242 122.2461 55.14966 122.10718
47.09253 121.96826 55.70532 121.82935 50.56543 121.69043 53.62158 121.4126
55.84424 121.27368 41.53589 121.13477 58.62256 120.99585 62.23438 120.85693
55.84424 120.5791 56.12207 120.44019 55.14966 120.30127 48.75952 120.16235
52.51025 120.02344 52.64917 119.88452 56.12207 119.60669 57.78906 119.46777
50.2876 119.32886 55.42749 119.18994 62.5122 119.05103 56.12207 118.7732
56.12207 118.63428 54.31616 118.49536 54.17725 118.35645 48.89844 118.21753
55.5664 117.9397 52.64917 117.80078 56.12207 117.66187 59.31714 117.52295
54.45508 117.38403 61.5398 117.1062 57.51123 116.96729 54.87183 116.82837
54.594 116.68945 49.87085 116.55054 47.09253 116.41162 53.48267 116.13379
48.06494 115.99487 55.14966 115.85596 51.1211 115.71704 53.7605 115.57813
61.40088 115.3003 56.67773 115.16138 57.2334 115.02246 53.7605 114.88354
51.39893 114.74463 50.56543 114.4668 53.7605 114.32788 56.53882 114.18896
55.14966 114.05005 53.06592 113.91113 59.0393 113.6333 53.62158 113.49438
53.06592 113.35547 54.45508 113.21655 53.7605 113.07764 53.89941 112.93872
53.34375 112.66089 50.2876 112.52197 54.594 112.38306 54.594 112.24414
53.20483 112.10522 53.89941 111.8274 52.64917 111.68848 50.2876 111.54956
56.95557 111.41064 53.06592 111.27173 52.78809 110.9939 52.927 110.85498
49.4541 110.71606 53.34375 110.57715 53.89941 110.43823 52.927 110.29932
53.20483 110.02148 50.42651 109.88257 52.927 109.74365 52.51025 109.60474
52.78809 109.46582 52.927 109.18799 51.95459 109.04907 52.37134 108.91016
52.927 108.77124 52.51025 108.63232 51.53784 108.35449 50.14868 108.21558
49.03735 108.07666 52.0935 107.93774 48.89844 107.79883 52.64917 107.521
43.48071 107.38208 51.95459 107.24316 51.67676 107.10425 51.39893 106.96533
51.39893 106.82642 51.81567 106.54858 51.81567 106.40967 51.95459 106.27075
52.23242 106.13184 51.67676 105.99292 51.81567 105.71509 51.67676 105.57617
51.53784 105.43726 51.39893 105.29834 51.39893 105.15942 51.1211 104.88159
51.39893 104.74268 51.67676 104.60376 51.53784 104.46484 51.39893 104.32593
51.81567 104.0481 50.98218 103.90918 50.84326 103.77026 51.1211 103.63135
50.84326 103.49243 50.98218 103.35352 50.56543 103.07568 50.98218 102.93677
51.1211 102.79785 50.70435 102.65894 49.87085 102.52002 50.00977 102.24219
50.56543 102.10327 50.98218 101.96436 50.42651 101.82544 50.42651 101.68652
50.14868 101.40869 50.00977 101.26978 49.73193 101.13086 50.00977 100.99194
49.73193 100.85303 49.73193 100.71411 50.14868 100.43628 50.2876 100.29736
49.87085 100.15845 50.00977 100.01953 49.4541 99.88062 49.17627 99.60278
50.00977 99.46387 49.73193 99.32495 49.87085 99.18604 49.87085 99.04712
49.59302 98.76929 50.00977 98.63037 49.4541 98.49146 49.73193 98.35254
49.4541 98.21362 49.73193 97.93579 49.59302 97.79688 49.59302 97.65796
49.73193 97.51904 49.59302 97.38013 49.31519 97.24121 49.4541 96.96338
49.03735 96.82446 48.89844 96.68555 48.89844 96.54663 49.4541 96.40771
49.31519 96.12988 49.03735 95.99097 48.75952 95.85205 49.4541 95.71313
49.17627 95.57422 49.17627 95.29639 49.03735 95.15747 48.89844 95.01855
49.03735 94.87964 48.75952 94.74072 48.75952 94.46289 48.75952 94.32397
49.4541 94.18506 48.75952 94.04614 48.75952 93.90723 48.6206 93.76831
49.17627 93.49048 48.6206 93.35156 48.48169 93.21265 48.48169 93.07373
48.6206 92.93481 48.20386 92.65698 48.6206 92.51807 47.6482 92.37915
48.20386 92.24023 48.48169 92.10132 48.48169 91.82349 48.06494 91.68457
48.34277 91.54565 47.92603 91.40674 47.37036 91.26782 47.6482 91.1289
47.37036 90.85107 47.6482 90.71216 47.78711 90.57324 47.6482 90.43433
46.95361 90.29541 47.78711 90.01758 46.95361 89.87866 47.6482 89.73975
47.6482 89.60083 47.78711 89.46191 47.50928 89.18408 47.37036 89.04517
47.92603 88.90625 47.6482 88.76733 47.23145 88.62842 47.23145 88.35059
46.8147 88.21167 47.6482 88.07275 47.78711 87.93384 46.8147 87.79492
46.8147 87.656 47.37036 87.37817 47.09253 87.23926 47.37036 87.10034
47.37036 86.96143 46.95361 86.82251 46.39795 86.54468 46.95361 86.40576
46.8147 86.26685 47.09253 86.12793 46.67578 85.98901 46.53687 85.71118
45.84229 85.57227 46.39795 85.43335 46.25903 85.29443 45.9812 85.15552
46.39795 84.87769 46.53687 84.73877 46.8147 84.59985 46.25903 84.46094
45.42554 84.32202 45.1477 84.1831 46.25903 83.90527 46.53687 83.76636
45.56445 83.62744 45.28662 83.48853 44.86987 83.34961 46.39795 83.07178
48.48169 82.93286 45.70337 82.79395 44.45313 82.65503 42.23047 82.51611
45.56445 82.23828 49.31519 82.09937 49.59302 81.96045 44.86987 81.82153
41.39697 81.68262 44.73096 81.5437 45.70337 81.26587 45.70337 81.12695
44.45313 80.98804 44.03638 80.84912 45.00879 80.7102 45.28662 80.43237
45.28662 80.29346 44.59204 80.15454 44.1753 80.01563 44.03638 79.87671
44.59204 79.59888 44.59204 79.45996 44.1753 79.32104 44.73096 79.18213
44.03638 79.04321 43.75854 78.76538 44.1753 78.62646 44.45313 78.48755
45.00879 78.34863 44.03638 78.20972 41.53589 78.0708 41.25806 77.79297
44.03638 77.65405 46.67578 77.51514 43.48071 77.37622 41.25806 77.2373
38.61865 76.95947 41.39697 76.82056 47.09253 76.68164 47.92603 76.54272
44.59204 76.40381 42.64722 76.12598 40.84131 75.98706 43.61963 75.84814
45.70337 75.70923 42.64722 75.57031 39.0354 75.29248 40.42456 75.15356
43.61963 75.01465 45.56445 74.87573 42.64722 74.73682 42.5083 74.5979
42.36938 74.32007 41.95264 74.18115 41.95264 74.04224 43.06396 73.90332
43.75854 73.7644 42.64722 73.48657 43.20288 73.34766 42.64722 73.20874
41.95264 73.06982 40.28564 72.93091 36.81274 72.65308 38.75757 72.51416
42.64722 72.37524 45.42554 72.23633 47.92603 72.09741 42.78613 71.9585
41.95264 71.68066 41.6748 71.54175 39.45215 71.40283 38.2019 71.26392
35.84033 71.125 41.81372 70.84717 45.9812 70.70825 47.37036 70.56934
46.25903 70.43042 41.53589 70.2915 41.25806 70.01367 41.81372 69.87476
36.11816 69.73584 37.09058 69.59692 40.56348 69.45801 44.31421 69.18018
49.03735 69.04126 46.8147 68.90234 41.25806 68.76343 40.56348 68.62451
37.78516 68.4856 37.92407 68.20776 35.28467 68.06885 37.64624 67.92993
44.59204 67.79102 50.42651 67.6521 50.00977 67.37427 41.25806 67.23535
36.95166 67.09644 37.22949 66.95752 36.81274 66.8186 33.61768 66.54077
38.2019 66.40186 45.28662 66.26294 51.67676 66.12402 50.2876 65.9851
40.28564 65.70728 40.14673 65.56836 35.70142 65.42944 34.45117 65.29053
32.50635 65.15161 34.03442 65.0127 45.42554 64.73486 50.00977 64.59595
51.67676 64.45703 40.7024 64.31812 39.17432 64.1792 37.09058 63.90137
31.67285 63.76245 32.50635 63.62354 34.86792 63.48462 43.89746 63.3457
53.89941 63.06787 46.67578 62.92896 40.28564 62.79004 34.59009 62.65112
33.20093 62.5122 32.22852 62.37329 28.33887 62.09546 38.89648 61.95654
45.9812 61.81763 50.70435 61.67871 46.95361 61.5398 36.11816 61.26196
33.20093 61.12305 31.11719 60.98413 26.67188 60.84521 32.22852 60.7063
38.47974 60.42847 49.17627 60.28955 54.73291 60.15063 39.8689 60.01172
37.92407 59.8728 29.58911 59.59497 25.56055 59.45605 28.89453 59.31714
29.72803 59.17822 42.92505 59.0393 53.06592 58.90039 48.20386 58.62256
41.6748 58.48364 33.61768 58.34473 26.53296 58.20581 27.7832 58.0669
25.83838 57.78906 38.06299 57.65015 46.8147 57.51123 52.51025 57.37231
46.8147 57.2334 37.22949 56.95557 30.70044 56.81665 27.64429 56.67773
24.3103 56.53882 30.28369 56.3999 38.34082 56.12207 49.87085 55.98315
53.89941 55.84424 41.11914 55.70532 37.36841 55.5664 30.83936 55.42749
25.28271 55.14966 27.36646 55.01074 30.97827 54.87183 41.6748 54.73291
55.14966 54.594 51.67676 54.31616 38.47974 54.17725 32.64526 54.03833
27.08862 53.89941 26.67188 53.7605 25.56055 53.48267 36.25708 53.34375
48.75952 53.20483 54.31616 53.06592 46.53687 52.927 36.11816 52.78809
31.53394 52.51025 26.39404 52.37134 25.28271 52.23242 29.72803 52.0935
37.64624 51.95459 49.59302 51.67676 54.03833 51.53784 41.25806 51.39893
37.64624 51.26001 28.33887 51.1211 24.17139 50.84326 25.28271 50.70435
28.89453 50.56543 42.5083 50.42651 52.0935 50.2876 47.50928 50.00977
38.61865 49.87085 35.5625 49.73193 30.4226 49.59302 23.19897 49.4541
23.61572 49.31519 32.78418 49.03735 40.14673 48.89844 56.26099 48.75952
45.28662 48.6206 39.31323 48.48169 31.81177 48.20386 25.1438 48.06494
23.89355 47.92603 24.17139 47.78711 35.14575 47.6482 45.84229 47.37036
48.6206 47.23145 43.61963 47.09253 35.28467 46.95361 33.06201 46.8147
26.81079 46.53687 23.4768 46.39795 25.1438 46.25903 32.50635 46.12012
46.8147 45.9812 50.84326 45.84229 39.31323 45.56445 34.729 45.42554
31.81177 45.28662 25.9773 45.1477 21.80981 45.00879 24.72705 44.73096
32.0896 44.59204 45.28662 44.45313 51.95459 44.31421 37.36841 44.1753
34.31226 43.89746 31.67285 43.75854 28.19995 43.61963 24.3103 43.48071
24.72705 43.3418 33.61768 43.20288 45.56445 42.92505 51.81567 42.78613
40.84131 42.64722 33.75659 42.5083 31.2561 42.36938 26.67188 42.09155
24.72705 41.95264 23.19897 41.81372 31.39502 41.6748 42.78613 41.53589
46.25903 41.25806 45.1477 41.11914 34.59009 40.98022 29.72803 40.84131
28.89453 40.7024 23.61572 40.42456 20.97632 40.28564 32.50635 40.14673
36.81274 40.00781 51.53784 39.8689 45.56445 39.72998 33.20093 39.45215
33.06201 39.31323 27.92212 39.17432 21.39307 39.0354 22.64331 38.89648
24.86597 38.61865 35.97925 38.47974 49.87085 38.34082 42.78613 38.2019
36.81274 38.06299 32.0896 37.78516 27.7832 37.64624 26.39404 37.50732
20.97632 37.36841 22.64331 37.22949 33.20093 36.95166 42.23047 36.81274
51.1211 36.67383 36.81274 36.53491 33.06201 36.396 31.95068 36.25708
23.19897 35.97925 20.69849 35.84033 23.75464 35.70142 27.92212 35.5625
42.92505 35.42358 50.2876 35.14575 42.36938 35.00684 36.25708 34.86792
28.89453 34.729 26.53296 34.59009 20.8374 34.31226 19.17041 34.17334
28.33887 34.03442 36.11816 33.89551 50.42651 33.75659 45.28662 33.61768
34.31226 33.33984 32.78418 33.20093 27.64429 33.06201 21.80981 32.9231
22.78223 32.78418 23.4768 32.50635 35.42358 32.36743 47.23145 32.22852
45.70337 32.0896 38.2019 31.95068 32.0896 31.67285 28.89453 31.53394
26.11621 31.39502 18.47583 31.2561 22.5044 31.11719 30.14478 30.83936
40.28564 30.70044 50.00977 30.56152 38.2019 30.4226 33.61768 30.28369
30.4226 30.14478 25.42163 29.86694 22.36548 29.72803 19.58716 29.58911
24.72705 29.4502 34.729 29.31128 46.53687 29.03345 44.45313 28.89453
33.89551 28.75562 30.28369 28.6167 27.36646 28.47778 22.08765 28.19995
20.69849 28.06104 23.33789 27.92212 31.2561 27.7832 46.12012 27.64429
44.86987 27.36646 33.33984 27.22754 30.4226 27.08862 26.11621 26.9497
23.33789 26.81079 20.55957 26.67188 20.8374 26.39404 29.58911 26.25513
40.28564 26.11621 48.6206 25.9773 36.53491 25.83838 30.56152 25.56055
25.9773 25.42163 23.89355 25.28271 21.94873 25.1438 20.42065 25.00488
28.89453 24.72705 39.72998 24.58813 46.39795 24.44922 37.22949 24.3103
29.86694 24.17139 25.9773 24.03247 24.17139 23.75464 21.94873 23.61572
19.44824 23.4768 28.06104 23.33789 38.47974 23.19897 46.39795 22.92114
34.45117 22.78223 27.64429 22.64331 25.1438 22.5044 24.3103 22.36548
21.25415 22.08765 21.53198 21.94873 28.6167 21.80981 40.7024 21.6709
44.73096 21.53198 32.9231 21.25415 24.3103 21.11523 25.83838 20.97632
24.72705 20.8374 21.80981 20.69849 24.3103 20.55957 31.11719 20.28174
42.92505 20.14282 38.47974 20.0039 28.33887 19.86499 27.08862 19.72607
27.08862 19.44824 22.22656 19.30933 23.61572 19.17041 25.42163 19.0315
34.729 18.89258 41.25806 18.61475 31.95068 18.47583 25.00488 18.33691
22.08765 18.198 20.69849 18.05908 23.89355 17.78125 26.81079 17.64233
33.06201 17.50342 31.39502 17.3645 30.97827 17.22559 22.22656 17.08667
26.39404 16.80884 24.58813 16.66992 24.3103 16.531 27.64429 16.39209
31.81177 16.25317 29.17236 15.97534 26.25513 15.83643 17.78125 15.69751
25.83838 15.5586 26.39404 15.41968 26.9497 15.14185 27.50537 15.00293
26.81079 14.86401 26.25513 14.7251 23.89355 14.58618 26.39404 14.44727
26.11621 14.16943 26.11621 14.03052 26.11621 13.8916 26.39404 13.75269
26.11621 13.61377 26.11621 13.33594 25.9773 13.19702 25.9773 13.0581
26.25513 12.91919 25.56055 12.78027 25.56055 12.50244 25.42163 12.36353
25.1438 12.22461 25.83838 12.0857 25.42163 11.94678 25.69946 11.66895
25.1438 11.53003 24.72705 11.39111 25.1438 11.2522 24.72705 11.11328
25.28271 10.97437 25.56055 10.69653 24.86597 10.55762 24.86597 10.4187
25.28271 10.27979 25.28271 10.14087 24.44922 9.86304 24.58813 9.72412
24.17139 9.5852 24.17139 9.44629 23.89355 9.30737 24.86597 9.02954
24.03247 8.89063 24.58813 8.75171 24.17139 8.6128 24.17139 8.47388
24.03247 8.19604 24.3103 8.05713 24.17139 7.91821 24.03247 7.7793 24.03247
7.64038 23.61572 7.50146 23.75464 7.22363 23.89355 7.08472 24.17139
6.9458 23.61572 6.80688 23.75464 6.66797 23.89355 6.39014 23.75464
6.25122 23.61572 6.1123 23.89355 5.97339 23.75464 5.83447 23.61572
5.55664 23.89355 5.41772 23.61572 5.27881 23.33789 5.1399 23.4768 5.00098
23.4768 4.86206 24.17139 4.58423 23.61572 4.44531 23.75464 4.3064 23.61572
4.16748 23.33789 4.02856 23.4768 3.75073 22.92114 3.61182 23.4768 3.4729
23.19897 3.33398 22.64331 3.19507 23.4768 2.91724 23.4768 2.77832 23.33789
2.6394 23.33789 2.50049 23.19897 2.36157 23.19897 2.08374 23.19897
1.94482 22.78223 1.80591 22.5044 1.66699 22.5044 1.52808 23.06006 1.38916
22.5044 1.11133 22.22656 0.97241 22.5044 0.8335 22.36548 0.69458 22.22656
0.55566 22.64331 0.27783 22.36548 0.13892 22.36548 0.0 22.08765   /currentpoint
load stopped pop /Lineto /lineto load def false 0  setlinejoin Line
 closepath gsave 0.5  setgray  1. .setopacityalpha  fill  grestore
gsave 0.0 SLW 0.5  setgray  1. .setopacityalpha  0  setlinecap stroke
 grestore end
 
@endspecial 357
2538 a
tx@Dict begin /mtrxc CM def CP CP T STV newpath 0.0 SLW 0  setgray
  0.0 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  [ 143.25714 200.56 143.25714 83.34961 57.30286
112.00104 57.30286 229.21143   /currentpoint load stopped pop /Lineto
/lineto load def false 0  setlinejoin Line  closepath gsave 0  setgray
 1. .setopacityalpha  fill  grestore gsave 0.0 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore clip newpath mtrxc setmatrix moveto
0 setgray end
 357 2538 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 78.14026
138.90733 90.30408 134.85706 90.30408 178.277 78.14026 182.32727 78.14026
200.98976 121.1174 186.59894 121.1174 167.93643 108.95357 171.98671
108.95357 128.64491 121.1174 124.59464 121.1174 105.93213 78.14026
120.24483 78.14026 138.90733   /Lineto /lineto load def false 0  setlinejoin
Line  gsave 1  setgray  1. .setopacityalpha  fill  grestore gsave 0.0
SLW 0  setgray  1. .setopacityalpha  0  setlinecap stroke  grestore
end
 
@endspecial
357 2538 a
currentpoint initclip moveto
 357 2538 a 390 2538 a
tx@Dict begin /mtrxc CM def CP CP T STV newpath 0.0 SLW 0  setgray
  0.0 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  [ 234.42078 224.00208 234.42078 106.79169 149.76883
83.34961 149.76883 200.56   /currentpoint load stopped pop /Lineto
/lineto load def false 0  setlinejoin Line  closepath gsave 0  setgray
 1. .setopacityalpha  fill  grestore gsave 0.0 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore clip newpath mtrxc setmatrix moveto
0 setgray end
 390 2538 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.0 SLW 0  setgray   0.0 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 202.9042 170.476 201.3414 175.29465 197.82509 178.15979 193.52737
178.68073 186.88545 176.85745 183.62961 174.25278 182.0668 170.8667
183.36914 167.22015 188.83896 165.78758 194.82971 165.78758 200.03906
165.65735 206.29028 165.39688 211.7601 164.74571 214.75548 164.09454
218.79272 162.7922 222.69974 160.448 225.82535 157.19215 227.38815
154.32701 228.56026 150.42 228.82072 142.3455 226.73698 135.05241 225.17418
131.66634 223.09044 128.01979 219.96483 124.37325 216.57875 120.98717
213.3229 118.64296 209.15543 116.16852 205.76935 114.47548 200.42976
112.39174 196.52275 111.21964 192.61574 110.308 187.53662 109.39636
184.80171 109.00566 180.8947 108.61496 176.59698 108.48473 172.0388
109.00566 167.08992 110.6987 161.88057 114.60571 158.8852 119.29413
156.93169 125.02441 156.28052 130.23376   1. 0.1 0.  /c ED /b ED /a
ED false OpenCurve   0.0 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 179.7226 136.74545 180.24353
133.61984 181.93657 129.71283 184.93195 127.10815 188.70872 126.06628
194.95995 126.71745 200.29953 129.1919 203.42514 132.57797 204.46701
134.92218 204.85771 137.78732 203.94608 140.392 201.99257 142.21527
197.82509 143.51761 189.49013 143.90831 185.97382 144.03854 178.15979
144.68971 171.2574 146.25252 164.87595 149.37813 161.09917 153.67584
159.53636 157.58286 159.01543 161.48987 159.6666 168.00156 161.48987
173.08067 164.09454 177.50862 169.3039 182.97844 171.90857 185.19241
177.11792 188.31802 181.02493 190.1413 184.93195 191.44363 188.18779
192.4855 193.91808 193.91808 200.82047 194.95995 207.33215 195.35065
213.97408 194.30878 218.01132 192.61574 220.74623 190.40176 223.09044
187.27615 225.04395 182.97844 226.47652 177.11792   1. 0.1 0.  /c ED
/b ED /a ED false OpenCurve  closepath gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.0 SLW 0  setgray  1. .setopacityalpha  0  setlinecap
stroke  grestore end
 
@endspecial 390 2538 a
currentpoint initclip moveto
 390 2538 a 1201 2327
a
tx@Dict begin /mtrxc CM def CP CP T STV newpath 0.0 SLW 0  setgray
  0.0 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  [ 234.42078 224.00208 234.42078 106.79169 149.76883
83.34961 149.76883 200.56   /currentpoint load stopped pop /Lineto
/lineto load def false 0  setlinejoin Line  closepath gsave 0  setgray
 1. .setopacityalpha  fill  grestore gsave 0.0 SLW 0  setgray  1. .setopacityalpha
 0  setlinecap stroke  grestore clip newpath mtrxc setmatrix moveto
0 setgray end
 1201 2327 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.0 SLW 0  setgray   0.0 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 202.9042 170.476 201.3414 175.29465 197.82509 178.15979 193.52737
178.68073 186.88545 176.85745 183.62961 174.25278 182.0668 170.8667
183.36914 167.22015 188.83896 165.78758 194.82971 165.78758 200.03906
165.65735 206.29028 165.39688 211.7601 164.74571 214.75548 164.09454
218.79272 162.7922 222.69974 160.448 225.82535 157.19215 227.38815
154.32701 228.56026 150.42 228.82072 142.3455 226.73698 135.05241 225.17418
131.66634 223.09044 128.01979 219.96483 124.37325 216.57875 120.98717
213.3229 118.64296 209.15543 116.16852 205.76935 114.47548 200.42976
112.39174 196.52275 111.21964 192.61574 110.308 187.53662 109.39636
184.80171 109.00566 180.8947 108.61496 176.59698 108.48473 172.0388
109.00566 167.08992 110.6987 161.88057 114.60571 158.8852 119.29413
156.93169 125.02441 156.28052 130.23376   1. 0.1 0.  /c ED /b ED /a
ED false OpenCurve   0.0 SLW 0  setgray  /ArrowA { /lineto load stopped
{ moveto } if } def /ArrowB { } def  [ 179.7226 136.74545 180.24353
133.61984 181.93657 129.71283 184.93195 127.10815 188.70872 126.06628
194.95995 126.71745 200.29953 129.1919 203.42514 132.57797 204.46701
134.92218 204.85771 137.78732 203.94608 140.392 201.99257 142.21527
197.82509 143.51761 189.49013 143.90831 185.97382 144.03854 178.15979
144.68971 171.2574 146.25252 164.87595 149.37813 161.09917 153.67584
159.53636 157.58286 159.01543 161.48987 159.6666 168.00156 161.48987
173.08067 164.09454 177.50862 169.3039 182.97844 171.90857 185.19241
177.11792 188.31802 181.02493 190.1413 184.93195 191.44363 188.18779
192.4855 193.91808 193.91808 200.82047 194.95995 207.33215 195.35065
213.97408 194.30878 218.01132 192.61574 220.74623 190.40176 223.09044
187.27615 225.04395 182.97844 226.47652 177.11792   1. 0.1 0.  /c ED
/b ED /a ED false OpenCurve  closepath gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 0.0 SLW 0  setgray  1. .setopacityalpha  0  setlinecap
stroke  grestore end
 
@endspecial
1201 2327 a
currentpoint initclip moveto
 1201 2327 a 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
